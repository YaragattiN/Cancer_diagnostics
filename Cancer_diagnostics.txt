#Project_Cancer_Diagnostics_Feature_Selection_V3

import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt # data visualization
%matplotlib inline
import seaborn as sns # statistical data visualization


from sklearn.tree import DecisionTreeClassifier #Decision Tree
from sklearn.model_selection import train_test_split#Train Test Split
from sklearn import metrics
from sklearn import tree


import csv
import pprint
import dateutil
from encodings.aliases import aliases

#Part-1: data Exploration and Pre-processing
#1) Load the given dataset
def getEncodingFormatOfCSV(f):
    alias_values = set(aliases.values())
    for encoding in set(aliases.values()):
        try:
            df=pd.read_csv(f, encoding=encoding)
            return(encoding)
        except:
            pass
f_csv=r'C:\Users\venkaten\Downloads\Project_10_Python_Clustering_Pr.csv'

df = pd.read_csv(f_csv,encoding=getEncodingFormatOfCSV(f_csv))

df

df.info

df.isnull().sum()

#8. Create pair plot between two column radius_mean and radius_mean by diagnosis
sns.pairplot(
    df,
    x_vars=["radius_mean", "texture_mean"],
    y_vars=["diagnosis"],
)

target = df['diagnosis']

data=df[["diagnosis","radius_mean","perimeter_mean","area_mean","texture_mean"]]

input = data.drop('diagnosis',axis='columns')

from sklearn.preprocessing import LabelEncoder

input= input.apply(LabelEncoder().fit_transform)

input

X_train, X_test, Y_train, Y_test = train_test_split(input,target, test_size = 0.3, random_state = 42)

X_train

X_train.shape

X_test

Y_train.shape

Y_train

Y_test

from sklearn import tree
model = tree.DecisionTreeClassifier()

model.fit(X_train,Y_train)

model.score(X_train,Y_train)

model.score(X_test,Y_test)

y_pred  = model.predict(X_test)
y_pred

metrics.confusion_matrix(Y_test, y_pred)

from sklearn import tree
text_representation = tree.export_text(model)
print(text_representation)

plt.figure(figsize=(50,50))

from sklearn import tree

tree.plot_tree(model,feature_names=input.columns,  
                   class_names=['Malignant','Benign'],
                   filled=True) 

# 0-No Salary is not greater than 50000

# actual values
y_pred

Y_test

from sklearn import metrics 

# confusion matrix,accuracy,classification_report in sklearn
from sklearn.metrics import confusion_matrix 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import classification_report 

accuracy = metrics.accuracy_score(Y_test,y_pred)

accuracy

accuracy_percentage = 100 * accuracy
accuracy_percentage

report=classification_report(Y_test,y_pred) 

print(report)

import matplotlib.gridspec as gridspec # subplots
import seaborn as sns
from scipy.cluster.hierarchy import dendrogram, linkage,median  # linkage analysis and dendrogram for visualization
from scipy.cluster.hierarchy import fcluster  # simple clustering
from scipy.spatial.distance import pdist, squareform # metric
from sklearn import datasets, metrics
def fancy_dendrogram(*args, **kwargs):
    max_d = kwargs.pop('max_d', None)
    if max_d and 'color_threshold' not in kwargs:
        kwargs['color_threshold'] = max_d
    annotate_above = kwargs.pop('annotate_above', 0)

    ddata = dendrogram(*args, **kwargs)

    if not kwargs.get('no_plot', False):
        plt.title('Hierarchical Clustering Dendrogram ')
        plt.xlabel('sample index')
        plt.ylabel('distance')
        for i, d, c in zip(ddata['icoord'], ddata['dcoord'], ddata['color_list']):
            x = 0.5 * sum(i[1:3])
            y = d[1]
            if y > annotate_above:
                plt.plot(x, y, 'o', c=c)
                plt.annotate("%.3g" % y, (x, y), xytext=(0, -5),
                             textcoords='offset points',
                             va='top', ha='center')
        if max_d:
            plt.axhline(y=max_d, c='k')
    return ddata

def getCenter(D,clusters): # distance matrix and clusters
  err = .0
  centers = []
  contr = []
  for i in range(len(set(clusters))):
    id_pts = [index for index,value in enumerate(clusters) if value == i+1] #ids cluster i-th
    sub_ms = D[id_pts,:][:,id_pts] #sub distance matrix
    err = err + np.sum(D[np.argmin(np.mean(sub_ms, axis=0)), :])  # errore assoluto  +=  somma riga centroide della matrice D

    beta = 1
    index = np.exp(-beta * sub_ms / sub_ms.std()).sum(axis=1).argmax()
    centers.append(id_pts[index])
    contr.append(float("{0:.2f}".format((len(sub_ms) * 100) / len(D))))
    
  return contr,err,centers

D = input.values

#ward = Similarity of two clusters is based on the increase in squared error when two clusters are merged
methods = ['single','complete','average','weighted','median','ward']


plt.figure(figsize=(25, 8))
for i in range(len(methods)):
  plt.subplot(231+i)
  Z = linkage(D, method=methods[i]) #Perform hierarchical/agglomerative clustering. 
  de = dendrogram(
      Z,
      leaf_rotation=90.,
      leaf_font_size=11.,
      distance_sort='descending',
      truncate_mode = 'lastp',
      p=50
      
  )
  plt.title(methods[i])

plt.tight_layout()

sns.set_style('whitegrid') 
D = input.values

Z = linkage(D, method='ward', metric='euclidean') #Perform hierarchical/agglomerative clustering. ward = Similarity of two clusters is based on the increase in squared error when two clusters are merged
 
plt.figure(figsize=(15, 7))
dendrogram(
    Z,
    
    leaf_rotation=90.,
    leaf_font_size=11.,
    show_contracted=True,
    distance_sort='descending',
    truncate_mode = 'lastp',
    p=50
)

plt.tight_layout()

D = input.values
from sklearn.cluster import KMeans
wcss = []
for i in range(1, 30):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(D)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 30), wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

from sklearn.decomposition import PCA,KernelPCA # Principal Component Analysis module

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_samples, silhouette_score

import matplotlib.pyplot as plt
import matplotlib.cm as cm
import numpy as np

print(__doc__)

# Generating the sample data from make_blobs
# This particular setting has one distinct cluster and 3 clusters placed close
# together.
X = input.values

range_n_clusters = [2, 3, 4, 5, 6]

pca_2d = PCA(n_components=2)
pca_2d_r = pca_2d.fit_transform(X)

for n_clusters in range_n_clusters:
    # Create a subplot with 1 row and 2 columns
    fig, (ax1, ax2) = plt.subplots(1, 2)
    fig.set_size_inches(18, 5)

    # The 1st subplot is the silhouette plot
    # The silhouette coefficient can range from -1, 1 but in this example all
    # lie within [-0.1, 1]
    ax1.set_xlim([-0.1, 1])
    # The (n_clusters+1)*10 is for inserting blank space between silhouette
    # plots of individual clusters, to demarcate them clearly.
    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])

    # Initialize the clusterer with n_clusters value and a random generator
    # seed of 10 for reproducibility.
    clusterer = KMeans(n_clusters=n_clusters, random_state=10, max_iter=9000)
    cluster_labels = clusterer.fit_predict(X)

    # The silhouette_score gives the average value for all the samples.
    # This gives a perspective into the density and separation of the formed
    # clusters
    silhouette_avg = silhouette_score(X, cluster_labels)
    print("For n_clusters =", n_clusters,
          "The average silhouette_score is :", silhouette_avg)
 
    # Compute the silhouette scores for each sample
    sample_silhouette_values = silhouette_samples(X, cluster_labels)

    y_lower = 10
    for i in range(n_clusters):
        # Aggregate the silhouette scores for samples belonging to
        # cluster i, and sort them
        ith_cluster_silhouette_values = \
            sample_silhouette_values[cluster_labels == i]

        ith_cluster_silhouette_values.sort()

        size_cluster_i = ith_cluster_silhouette_values.shape[0]
        y_upper = y_lower + size_cluster_i

        cmap = cm.get_cmap("Spectral")
        colors = cmap(float(i) / n_clusters)
        ax1.fill_betweenx(np.arange(y_lower, y_upper),
                           0, ith_cluster_silhouette_values,
                          facecolor=colors, edgecolor=colors, alpha=0.7)

        # Label the silhouette plots with their cluster numbers at the middle
        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

        # Compute the new y_lower for next plot
        y_lower = y_upper + 10  # 10 for the 0 samples

    ax1.set_title("The silhouette plot for the various clusters.")
    ax1.set_xlabel("The silhouette coefficient values")
    ax1.set_ylabel("Cluster label")

    # The vertical line for average silhouette score of all the values
    ax1.axvline(x=silhouette_avg, color="red", linestyle="--")

    ax1.set_yticks([])  # Clear the yaxis labels / ticks
    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])

    # 2nd Plot showing the actual clusters formed
    cmap = cm.get_cmap("Spectral")
    colors = cmap(cluster_labels.astype(float) / n_clusters)
    ax2.scatter(pca_2d_r[:, 0], pca_2d_r[:, 1], marker='.', s=90, lw=0, alpha=0.7,
                c=colors, edgecolor='k')
    
    # Labeling the clusters
    centers = clusterer.cluster_centers_
    # Draw white circles at cluster centers
    centers = pca_2d.transform(centers)
    ax2.scatter(centers[:, 0], centers[:, 1], marker='o',
                c="white", alpha=1, s=250, edgecolor='k')

    for i, c in enumerate(centers):
        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1,
                    s=100, edgecolor='k')

    ax2.set_title("The visualization of the clustered data.")
    ax2.set_xlabel("PC1")
    ax2.set_ylabel("PC2")

    plt.suptitle(("Silhouette analysis for KMeans clustering on sample data "
                  "with n_clusters = %d" % n_clusters),
                 fontsize=14, fontweight='bold')

    plt.show()

